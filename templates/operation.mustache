
{{{operationComments}}}
  {{operationName}}({{#operationParamsClass
  }}params: {{serviceClass}}.{{operationParamsClass}}{{/operationParamsClass}}{{^operationParamsClass
  }}{{#operationParameters}}{{paramVar}}{{^paramRequired}}?{{/paramRequired}}: {{paramType
  }}{{^paramIsLast}},
    {{/paramIsLast}}{{/operationParameters}}{{/operationParamsClass
    }}): Promise<_ApiResponse_<{{operationResultType}}>> {
    let options = new RequestOptions({
      method: "{{operationMethod}}",
      url: ApiConfiguration.rootUrl + `{{{operationPathExpression}}}`,
      search: new URLSearchParams(),
      headers: new Headers()
    });
{{#operationParameters}}{{>parameter}}
{{/operationParameters}}
    ApiConfiguration.prepareRequestOptions(options);
    return this.http.request(options.url, options)
      .toPromise()
      .then(response => {
        if (response.status < 200 || response.status > 299) {
          throw response;
        }
        return new _ApiResponse_(response, {{#operationIsVoid}}null{{/operationIsVoid
        }}{{#operationIsString}}response.text(){{/operationIsString
        }}{{#operationIsNumber}}parseFloat(response.text()){{/operationIsNumber
        }}{{#operationIsBoolean}}response.text() == 'true'{{/operationIsBoolean
        }}{{#operationIsEnum}}response.text() as {{operationResultType}}{{/operationIsEnum
        }}{{#operationIsObject}}response.json() as {{operationResultType}}{{/operationIsObject
        }}{{#operationIsPrimitiveArray}}response.json() as {{operationResultType}}{{/operationIsPrimitiveArray
        }}{{#operationIsUnknown}}null{{/operationIsUnknown}});
      }){{#generalErrorHandler}}
      .catch(e => {
        ApiConfiguration.handleError(e);
        throw e;
      }){{/generalErrorHandler}};
  }
